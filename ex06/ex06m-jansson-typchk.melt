;; -*- Lisp -*-
;; file ex0m-jansson-typchk.melt

;; comment in both MELT and generated C files::
(comment 
 "***
  * 	 Copyright 2012 Basile Starynkevitch

  * This file ex06m-jansson-typchk.melt is a MELT extension (see
  * http://gcc-melt.org/ for more) for GCC to typecheck variadic calls
  * to json_pack and json_unpack functions -when their format string
  * argument is a constant- from the JANSSON library
  * http://www.digip.org/jansson ; this requires MELT 0.9.7 (from october 2012)
  * or later MELT plugin release.

  * This MELT extension is free software; you can redistribute it
  * and/or modify it under the terms of the GNU Lesser General Public
  * License as published by the Free Software Foundation; either
  * version 3 of the License, or (at your option) any later version.

  * This MELT extension is distributed in the hope that it will be
  * useful, but WITHOUT ANY WARRANTY; without even the implied warranty
  * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU Lesser General Public License for more details.  You should
  * have received a copy of the GNU Lesser General Public License along
  * with this MELT extension. If not, see
  * <http://www.gnu.org/licenses/>.
***")


;; global reference to the json_t type boxed tree
(definstance ref_json_t class_reference)

;; global reference to a pointer to json_t type boxed tree
(definstance ref_ptr_json_t class_reference)

;; global reference to a json_int_t type boxed tree
(definstance ref_json_int_t class_reference)

;; global reference to the json_pack type boxed tree
(definstance ref_json_pack class_reference)

;; global reference to the json_unpack type boxed tree
(definstance ref_json_unpack class_reference)

;; global reference to a pointer to char type boxed tree
(definstance ref_ptr_char class_reference)

;; global reference to an int type boxed tree
(definstance ref_int class_reference)

;; global reference to a double type boxed tree
(definstance ref_double class_reference)


;; MELT 0.9.7 don't have these yet, but the next one will have
;; tree_useless_type_conversion_p & tree_types_compatible_p
(defprimitive basile_useless_type_conversion_p (:tree tr1 tr2) :long
  #{/*basile_useless_type_conversion_p*/ ($TR1) && ($TR2)
  && useless_type_conversion_p(($TR1),($TR2))}#)

(defprimitive basile_types_compatible_p (:tree tr1 tr2) :long
  #{/*basile_types_compatible_p*/ ($TR1) && ($TR2)
  && types_compatible_p(($TR1),($TR2))}#)


;; a finish decl hook to find out the `json_t`, `json_pack` and `json_unpack` names and their trees
(defun jansson_finish_decl_hook (treedeclval)
  (let ( (:tree treedecl (tree_content treedeclval))
	 )
    (match treedecl
	   (?(tree_decl_at_source_location
	      ?filepathv ?line ?col)
	     (when (string_ends filepathv '"jansson.h")
	       (debug "jansson_finish_decl_hook treedecl=" treedecl "\n filepathv=" filepathv)
	       (match treedecl
		      (?(tree_type_decl ?trty  ?(cstring_same "json_t") ?uid)
			(debug "jansson_finish_decl_hook found json_t treedecl=" treedecl)
			(set_ref ref_json_t (make_tree discr_tree treedecl))
			(debug "jansson_finish_decl_hook ref_json_t=" ref_json_t)
			(set_ref ref_ptr_json_t (make_tree discr_tree (tree_pointer_type trty)))
			(debug "jansson_finish_decl_hook ref_ptr_json_t=" ref_ptr_json_t)
			
			)
		      (?(tree_type_decl ?trty  ?(cstring_same "json_int_t") ?uid)
			(debug "jansson_finish_decl_hook found json_int_t treedecl=" treedecl)
			(set_ref ref_json_int_t (make_tree discr_tree treedecl))
			(debug "jansson_finish_decl_hook found ref_json_int_t=" ref_json_int_t)
			)
		      (?(tree_function_decl_of_name "json_pack" ?_ ?_)
			(debug "jansson_finish_decl_hook found json_pack treedecl=" treedecl)
			(set_ref ref_json_pack (make_tree discr_tree treedecl)))
		      (?(tree_function_decl_of_name "json_unpack" ?_ ?_)
			(debug "jansson_finish_decl_hook found json_unpack treedecl=" treedecl)
			(set_ref ref_json_unpack (make_tree discr_tree treedecl)))
		      (?_ (void))
		      )))
	   (?_ (void)))))


;; utility function to check if a given Gimple argument is compatible with a given boxed type
;; returns nil if it is not
(defun jansson_arg_type_compatible (boxtype :tree trarg)
  (debug "jansson_arg_type_compatible boxtype=" boxtype " trarg=" trarg)
  (let ( (:tree trtype (tree_content boxtype))
	 )
    (debug "jansson_arg_type_compatible trtype=" trtype)
    (assert_msg "trtype nonull" trtype)
    (cond
     ((==t trtype trarg) 
      (debug "jansson_arg_type_compatible same types " trtype)
      (return :true))
     ((basile_useless_type_conversion_p trtype trarg)
      (debug "jansson_arg_type_compatible useless_type_conversion_p trtype=" trtype " trarg=" trarg)
      (return :true))
     ((basile_useless_type_conversion_p trarg trtype)
      (debug "jansson_arg_type_compatible rev.useless_type_conversion_p trarg=" trarg " trtype=" trtype)
      (return :true))
     (:else
      (debug "jansson_arg_type_compatible uncompatible trtype=" trtype " trarg=" trarg)
      (return ())))
))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; check a json_pack call with constant format vfmtstr string
(defun jansson_check_pack_call (vfmtstr :gimple g :long nbargs)
  (debug "jansson_check_pack_call vfmtstr=" vfmtstr " g=" g " nbargs=" nbargs)
  (assert_msg "check vfmtstr" (is_string vfmtstr))
  (let ( (:long curargnum 1)
	 (:long bracecount 0)
	 (:long bracketcount 0)
	 (:tree tr_char (tree_char_type_node))
	 (:tree tr_charptr (tree_content !ref_ptr_char))
	 )
    (debug "jansson_check_pack_call tr_char=" tr_char 
	   "\n tr_charptr=" tr_charptr)
    (foreach_in_string
     (vfmtstr)
     (:long curch ix)
     (let ( (:tree curarg (gimple_call_nth_arg g curargnum))
	    )
       (debug "jansson_check_pack_call curargnum#" curargnum " curch#" curch
	      " ix#" ix " curarg=" curarg)
       (match curch
	      (#\{
	       (setq bracecount (+i bracecount 1))
	       (debug "jansson_check_pack_call opening brace bracecount#" bracecount)
	       (void)
	       )
	      (#\[
	       (setq bracketcount (+i bracketcount 1))
	       (debug "jansson_check_pack_call opening bracket bracketcount#" bracketcount)
	       (void)
	       )
	      (#\}
	       (setq bracecount (-i bracecount 1))
	       (debug "jansson_check_pack_call closing brace bracecount#" bracecount)
	       (void)
	       )
	      (#\n
	       (debug "jansson_check_pack_call with null")
	       (void)
	       )
	      (#\s
	       (debug "jansson_check_pack_call expecting string curarg=" curarg)
	       (let ( (:tree curargtype (tree_type curarg))
		      (compatyp (jansson_arg_type_compatible  !ref_ptr_char curargtype))
		      )
		 (debug "jansson_check_pack_call expect string, curargtype=" curargtype " compatyp=" compatyp)
		 (if (null compatyp)
		     (warning_at_tree curarg "strange argument to json_pack, expecting a string"))
		 )
	       (setq curargnum (+i curargnum 1))
	       (void)
	       )
	      (#\b
	       (debug "jansson_check_pack_call expecting boolean int curarg=" curarg)
	       (let ( (:tree curargtype (tree_type curarg))
		      (compatyp (jansson_arg_type_compatible  !ref_int curargtype))
		      )
		 (if (null compatyp)
		     (warning_at_tree curarg "strange argument to json_pack, expecting a boolean int")))
	       (setq curargnum (+i curargnum 1))
	       (void)
	       )
	      (#\i
	       (debug "jansson_check_pack_call expecting int curarg=" curarg)
	       (let ( (:tree curargtype (tree_type curarg))
		      (compatyp (jansson_arg_type_compatible  !ref_int curargtype))
		      )
		 (if (null compatyp)
		     (warning_at_tree curarg "strange argument to json_pack, expecting an int")))
	       (setq curargnum (+i curargnum 1))
	       (void)
	       )
	      (#\I
	       (debug "jansson_check_pack_call expecting json_int_t curarg=" curarg)
	       (let ( (:tree curargtype (tree_type curarg))
		      (compatyp (jansson_arg_type_compatible  !ref_json_int_t curargtype))
		      )
		 (if (null compatyp)
		     (warning_at_tree curarg "strange argument to json_pack, expecting a json_int_t")))
	       (setq curargnum (+i curargnum 1))
	       (void)
	       )
	      (#\f
	       (debug "jansson_check_pack_call expecting double curarg=" curarg)
	       (let ( (:tree curargtype (tree_type curarg))
		      (compatyp (jansson_arg_type_compatible  !ref_double curargtype))
		      )
		 (if (null compatyp)
		     (warning_at_tree curarg "strange argument to json_pack, expecting a double")))
	       (setq curargnum (+i curargnum 1))
	       (void)
	       )
	      (#\o
	       (debug "jansson_check_pack_call expecting json_t* curarg=" curarg)
	       (let ( (:tree curargtype (tree_type curarg))
		      (compatyp (jansson_arg_type_compatible  !ref_ptr_json_t curargtype))
		      )
		 (if (null compatyp)
		     (warning_at_tree curarg "strange argument to json_pack, expecting a json_t*")))
	       (setq curargnum (+i curargnum 1))
	       (void)
	       )
	      (#\O
	       (debug "jansson_check_pack_call expecting json_t* curarg=" curarg)
	       (let ( (:tree curargtype (tree_type curarg))
		      (compatyp (jansson_arg_type_compatible  !ref_ptr_json_t curargtype))
		      )
		 (if (null compatyp)
		     (warning_at_tree curarg "strange argument to json_pack, expecting a json_t*")))
	       (setq curargnum (+i curargnum 1))
	       (void)
	       )
	      (?_
	       (debug "jansson_check_pack_call strange char curch#" curch)))
       ;;
       (debug "jansson_check_pack_call end match curch=" curch " ix=" ix)
       ))				;end foreach_in_string
    (debug "jansson_check_pack_call end curargnum=" curargnum)
    )   
  (compile_warning "jansson_check_pack_call is incomplete")
  )

;; our gimple walker function just matches the relevant calls to json_pack & json_unpack
(defun jansson_gimple_walker (pass :gimple g)
  (let ( (:tree tr_json_pack (tree_content !ref_json_pack))
	 (:tree tr_json_unpack (tree_content !ref_json_unpack))
	 (:tree tr_char (tree_char_type_node))
	 (:tree tr_charptr (tree_content !ref_ptr_char))
	 )
    (debug "jansson_gimple_walker g=" g 
	   "\n tr_json_pack=" tr_json_pack " tr_json_unpack=" tr_json_unpack
	   "\n tr_char=" tr_char "\n our tr_charptr=" tr_charptr)
    (match 
     g
     ;; call to json_pack
     (?(gimple_call_1_more ?lhs tr_json_pack ?fmtarg ?nbargs)
       (debug "jansson_gimple_walker found call to json_pack g=" g "\n* fmtarg=" fmtarg "\n* nbargs=" nbargs)
       (match fmtarg
	      (?(tree_addr_expr 
		 ?(tree_pointer_type 
		   ?(tree_array_type tr_char ?trdomtype)) 
		 ?(tree_string_cst ?vfmtstr))
		(debug "jansson_gimple_walker json_pack call fmtarg trdomtype=" trdomtype "\n vfmtstr=" vfmtstr)
		(jansson_check_pack_call vfmtstr g nbargs)
		(void)
		)
	      (?_ 
	       (debug "jansson_gimple_walker json_pack call other fmtarg=" fmtarg)
	       (void))
	      )
       )
     ;; call to json_unpack
     (?(gimple_call_2_more ?lhs tr_json_unpack ?jsrootarg ?fmtarg ?nbargs)
       (debug "jansson_gimple_walker found call to json_unpack g=" g " jsrootarg=" jsrootarg 
	      " fmtarg=" fmtarg " nbargs=" nbargs)
       )
     ;; anything else
     (?_
      (void))))
  (return :true g)		   ;continue the walk on other gimples
  )

(defun jansson_pass_exec (pass)
  (with_cfun_decl 
   ()
   (:tree cfundecl)
   (debug "jansson_pass_exec cfundecl=" cfundecl " pass=" pass 
	  "\n* json_t=" !ref_json_t
	  "\n* json_pack=" !ref_json_pack
	  "\n* json_unpack=" !ref_json_unpack)
   ;; that pass may be called several times for a given cfun, so we
   ;; register the cfun in a pass-global map
   (let ( (passmap (get_field :gccpass_data pass))
	  )
     (if (maptree_get passmap cfundecl) 
	 (return))
     (maptree_put passmap cfundecl :true))
   ;; every basic block of the current cfun is interesting
   (each_bb_current_fun 
    ()
    (:basic_block bb)
    (debug "jansson_pass_exec bb=" bb)
    (let (
	  (:long bbix (basicblock_index bb))
	  (:gimple_seq bbgs (gimple_seq_of_basic_block bb))
	  )
      (debug "jansson_pass_exec before walking bbgs=" bbgs)
      (walk_gimple_seq_unique_tree pass bbgs 
				   jansson_gimple_walker
				   ())
      (debug "jansson_pass_exec after walking bbgs=" bbgs)
	
      ))
   (debug "jansson_pass_exec end cfundecl=" cfundecl)
   ))


;; the initialization, just before all passes
(defun jansson_start_all_passes ()
  (let ( (:tree chartypetree (tree_char_type_node))
	 (:tree ptrchartree (tree_pointer_type chartypetree))
	 (ptrchartreeval (make_tree discr_tree ptrchartree))
	 (:tree inttypetree (tree_integer_type_node))
	 (:tree doubletypetree (tree_double_type_node))
	 (:tree ptrinttree  (tree_pointer_type inttypetree))
	 (inttreeval (make_tree discr_tree inttypetree))
	 (doubletreeval (make_tree discr_tree doubletypetree))
	 )
    (debug "jansson_start_all_passes chartypetree=" (tree_char_type_node)
	   "\n ptrchartree=" ptrchartree
	   "\n ptrchartreeval=" ptrchartreeval)
    (assert_msg "check chartypetree" chartypetree)
    (set_ref ref_ptr_char ptrchartreeval)
    (set_ref ref_int inttreeval)
    (set_ref ref_double doubletreeval)
    )
  )

;; command and MELT mode for our Jansson typechecking analysis
(defun jansson_docmd  (cmd moduldata)
  (debug "jansson_docmd cmd=" cmd)
  (register_finish_decl_first jansson_finish_decl_hook)
  (let (
	;; for some reason, at this point, char_type_node is NULL in C
	(janssonpass (instance class_gcc_gimple_pass
				:named_name '"jansson_pass"
				;; a map to register the visited cfuns
				:gccpass_data (make_maptree discr_map_trees 100)
				:gccpass_exec jansson_pass_exec))
	 )
    ;; at this early stage, (tree_char_type_node) gives a null tree. We need
    ;; to register a hook before all passes to initialize
    (register_all_passes_start_first jansson_start_all_passes)
    (install_melt_pass_in_gcc janssonpass :after '"phiopt" 0)
    (debug "jansson_docmd installed janssonpass=" janssonpass)
    (return :true)
    ))

(definstance jansson_mode
  class_melt_mode
  :named_name '"jansson"
  :meltmode_help '"type check variadic packing and unpacking functions fron JANSSON library"
  :meltmode_fun jansson_docmd
)
(install_melt_mode jansson_mode)

;; eof ex06m-jansson-typchk.melt
