;; -*- Lisp -*-
;; file ex0m-jansson-typchk.melt

;; comment in both MELT and generated C files::
(comment 
 "***
  * 	 Copyright 2012 Basile Starynkevitch

  * This file ex06m-jansson-typchk.melt is a MELT extension (see
  * http://gcc-melt.org/ for more) for GCC to typecheck variadic calls
  * to json_pack and json_unpack functions -when their format string
  * argument is a constant- from the JANSSON library
  * http://www.digip.org/jansson

  * This MELT extension is free software; you can redistribute it
  * and/or modify it under the terms of the GNU Lesser General Public
  * License as published by the Free Software Foundation; either
  * version 3 of the License, or (at your option) any later version.

  * This MELT extension is distributed in the hope that it will be
  * useful, but WITHOUT ANY WARRANTY; without even the implied warranty
  * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU Lesser General Public License for more details.  You should
  * have received a copy of the GNU Lesser General Public License along
  * with this MELT extension. If not, see
  * <http://www.gnu.org/licenses/>.
***")


;; global reference to the json_t type boxed tree
(definstance ref_json_t class_reference)

;; global reference to the json_pack type boxed tree
(definstance ref_json_pack class_reference)

;; global reference to the json_unpack type boxed tree
(definstance ref_json_unpack class_reference)


;; Test that the file location of a declaration is inside "jansson.h" include file.
;; After MELT 0.9.6 we could use the tree_decl_at_source_location cmatcher instead.
(defprimitive tree_is_jansson_declaration (:tree tr) :long
  :doc #{return non zero if $TR is a declaration inside the jansson.h header.}#
  #{ /*jansson_declaration_p*/ $TR && DECL_P($TR) 
   && DECL_SOURCE_LOCATION($TR) != UNKNOWN_LOCATION
   && strstr (LOCATION_FILE(DECL_SOURCE_LOCATION($TR)), "jansson.h") }#)

;; a finish decl hook to find out the `json_t`, `json_pack` and `json_unpack` names and their trees
(defun jansson_finish_decl_hook (treedeclval)
  (let ( (:tree treedecl (tree_content treedeclval))
	 )
    (match treedecl
	   (?(tree_type_decl ?trty  ?(cstring_same "json_t") ?uid)
	     (debug "found json_t treedecl=" treedecl)
	     (if (tree_is_jansson_declaration treedecl)
		 (set_ref ref_json_t (make_tree discr_tree treedecl)))
	     )
	   (?(tree_function_decl_of_name "json_pack" ?_ ?_)
	     (debug "found json_pack treedecl=" treedecl)
	     (if (tree_is_jansson_declaration treedecl)
		 (set_ref ref_json_pack (make_tree discr_tree treedecl)))
	     )
	   (?(tree_function_decl_of_name "json_unpack" ?_ ?_)
	     (debug "found json_unpack treedecl=" treedecl)
	     (if (tree_is_jansson_declaration treedecl)		 
		 (set_ref ref_json_unpack (make_tree discr_tree treedecl)))
	     )
	   (?_ (void))
	   )))



;; MELT 0.9.7 has a tree_char_type_node cmatcher, but previous MELT don't have it, so..
(defprimitive tree_char_type_node () :tree
  :doc #{Gives the char type tree node}#
  #{ char_type_node }#)


;; check a json_pack call with constant format vfmtstr string
(defun jansson_check_pack_call (vfmtstr :gimple g :long nbargs)
  (debug "jansson_check_pack_call vfmtstr=" vfmtstr " g=" g " nbargs=" nbargs)
  (compile_warning "jansson_check_pack_call is incomplete")
)

;; our gimple walker function just matches the relevant calls to json_pack & json_unpack
(defun jansson_gimple_walker (pass :gimple g)
  (let ( (:tree tr_json_pack (tree_content !ref_json_pack))
	 (:tree tr_json_unpack (tree_content !ref_json_unpack))
	 (:tree tr_char (tree_char_type_node))
	 )
    (debug "jansson_gimple_walker g=" g 
	   "\n tr_json_pack=" tr_json_pack " tr_json_unpack=" tr_json_unpack)
    (match 
     g
     ;; call to json_pack
     (?(gimple_call_1_more ?lhs tr_json_pack ?fmtarg ?nbargs)
       (debug "found call to json_pack g=" g "\n* fmtarg=" fmtarg "\n* nbargs=" nbargs)
       (match fmtarg
	      (?(tree_addr_expr 
		 ?(tree_pointer_type 
		   ?(tree_array_type tr_char ?trdomtype)) 
		 ?(tree_string_cst ?vfmtstr))
		(debug "json_pack call fmtarg trdomtype=" trdomtype "\n vfmtstr=" vfmtstr)
		(jansson_check_pack_call vfmtstr g nbargs)
		(void)
		)
	      (?_ 
	       (debug "json_pack call other fmtarg=" fmtarg)
	       (void))
	      )
       )
     ;; call to json_unpack
     (?(gimple_call_2_more ?lhs tr_json_unpack ?jsrootarg ?fmtarg ?nbargs)
       (debug "found call to json_unpack g=" g " jsrootarg=" jsrootarg 
	      " fmtarg=" fmtarg " nbargs=" nbargs)
       )
     ;; anything else
     (?_
      (void))))
  (return :true g)		   ;continue the walk on other gimples
  )

(defun jansson_pass_exec (pass)
  (with_cfun_decl 
   ()
   (:tree cfundecl)
   (debug "jansson_pass_exec cfundecl=" cfundecl " pass=" pass 
	  "\n* json_t=" !ref_json_t
	  "\n* json_pack=" !ref_json_pack
	  "\n* json_unpack=" !ref_json_unpack)
   ;; that pass may be called several times for a given cfun, so we
   ;; register the cfun in a pass-global map
   (let ( (passmap (get_field :gccpass_data pass))
	  )
     (if (maptree_get passmap cfundecl) 
	 (return))
     (maptree_put passmap cfundecl :true))
     ;; every basic block of the current cfun is interesting
     (each_bb_current_fun 
      ()
      (:basic_block bb)
      (debug "scanprobe_exec bb=" bb)
      (let (
	    (:long bbix (basicblock_index bb))
	    (:gimple_seq bbgs (gimple_seq_of_basic_block bb))
	    )
	(walk_gimple_seq_unique_tree pass bbgs 
				     jansson_gimple_walker
				     ())
   ))))

;; command and MELT mode for our Jansson typechecking analysis
(defun jansson_docmd  (cmd moduldata)
  (debug "jansson_docmd cmd=" cmd)
  (register_finish_decl_hook_first jansson_finish_decl_hook)
  (let ( (janssonpass (instance class_gcc_gimple_pass
				:named_name '"jansson_pass"
				;; a map to register the visited cfuns
				:gccpass_data (make_maptree discr_map_trees 100)
				:gccpass_exec jansson_pass_exec))
	 )
    (install_melt_gcc_pass janssonpass "after" "phiopt" 0)
    (debug "janssonpass=" janssonpass)
    (return :true)
    ))

(definstance jansson_mode
  class_melt_mode
  :named_name '"jansson"
  :meltmode_help '"type check variadic packing and unpacking functions fron JANSSON library"
  :meltmode_fun jansson_docmd
)
(install_melt_mode jansson_mode)

;; eof ex06m√®jansson-typchk.melt
